; ------------------------------------------------------
; "THE BEER-WARE LICENSE" (Revision 42):
; <phk@FreeBSD.ORG> wrote this file.  As long as you
; retain this notice you can do whatever you want with
; this stuff. If we meet some day, and you think this
; stuff is worth it, you can buy me a beer in return.
; Poul-Henning Kamp
; ------------------------------------------------------
; Slave program for remote controlled operation of
; RC3803 hardware
;
; Traffic is sort of a RPC protocol, with all traffic
; in 16 bit (big-endian) words.
;
; A transaction consists of two or three phases:
;	1) Command
;	2) Upload (optional)
;	3) Download
;
; The command phase consists of 6 words:
;	Command
;	4 arguments
;	Checksum
;
; On checksum error, RC3803 responds with a single
; zero word (= zero length download)
;
; If the transaction requires data to be uploaded
; The RC3803 responds with negative number of words
; expected, after which the controller sends these
; words.
;
; The download phase (mandatory) starts with the
; RC3803 sending number of words to download, followed
; by these words.
; ------------------------------------------------------

	.TXTM	1
	.TXTN	0
	.RDXO	16

	; RC3803 magic instructions
	.RDX	8
	.DUSR	LDB =	62601
	.DUSR	STB =	63201
	.RDX	10

?CTR	=  8.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Things in AUTOLOAD we reuse:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

ALPTR	= 23.			; Destination pointer
GETW	= 24.			; AC1 = GetWord() function

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; AUTOLOAD can only load into page zero.  We let it
;; pull in this tiny little "Extra Loader" which just
;; continues where AUTOLOAD stopped.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.LOC	64.			; Where AUTOLOAD puts us
	.-ELDR4-1 		; Word Count for AUTOLOAD
ELDR0:
	LDA	2,ALPTR
	INC	2,2
ELDR1:
	JSR	GETW
	STA	1,+0,2
	INC	2,2
	LDA	1,ELDR2
	SUB#	1,2,SZR
	JMP	ELDR1
	JMP	@ELDR3
ELDR2:	END
ELDR3:	BIRTH
ELDR4:	JMP	ELDR0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Stuff we want in page zero can go here...
;; XXX: reuse MUS's numeric constants ?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

CMD0:	0
ARG1:	0
ARG2:	0
ARG3:	0
ARG4:	0
CSUM:	0

HW:	.TXT "<13><10><10>TTY2 SLAVE PROGRAM<13><10>"

?3:	3.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TTY In/Out
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

TTYSP:	LDA	0,.+2
	JMP	TTY
	32.

TTYNL:	LDA	0,.+7
	DOAS	0,9.
	SKPDN	9.
	JMP	.-1
	LDA	0,.+2
	JMP	TTY
	13.
	10.

TTYC:
	LDA	0,+0,3
	MOVS	0,0
	DOAS	0,9.
	SKPDN	9.
	JMP	.-1
	JMP	+1,3

TTYC2:
	LDA	0,+0,3
	MOVS	0,0
	DOAS	0,9.
	SKPDN	9.
	JMP	.-1
	MOVS	0,0
	DOAS	0,9.
	SKPDN	9.
	JMP	.-1
	JMP	+1,3

TTYS:
	LDA	1,+0,3
	INC	3,3
TTYS1:
	LDB
	MOV	0,0,SNR
	JMP	+0,3
	INC	1,1
	DOAS	0,9.
	SKPDN	9.
	JMP	.-1
	JMP	TTYS1

?TTW0:	0
?TTW1:	0
TTYW:
	STA	3,?TTW1
	MOVS	0,0
	JSR	TTYB
	MOVS	0,0
	JSR	TTYB
	JMP @	?TTW1

?TTB0:	0
?TTB1:	0
TTYB:
	STA	3,?TTB1
	STA	0,?TTB0
	MOVZR	0,0
	MOVZR	0,0
	MOVZR	0,0
	MOVZR	0,0
	JSR	TTYX
	LDA	0,?TTB0
	JSR	TTYX
	LDA	0,?TTB0
	JSR @	?TTB1

TTYX:
	LDA	1,C15
	AND	1,0
	LDA	1,HEX2
	ADDZ	0,1
	LDB

TTY:
	DOAS	0,9.
	SKPDN	9.
	JMP	.-1
	JMP	+0,3

C15:	15
HEX:	.TXT "0123456789abcdef"
HEX2:	HEX*2


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Put Word pendant to AUTOLOAD's GETW
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PUTW:
	MOVS	0,0
	DOAS	0,41.
	SKPDN	41.
	JMP	.-1
	MOVS	0,0
	DOAS	0,41.
	SKPDN	41.
	JMP	.-1
	JMP	+0,3

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

BIRTH:
	JSR	TTYS
	HW*2
MAIN:
	JSR	TTYNL
	SUBO	2,2
	JSR	GETW
	STA	1,CMD0
	ADDZ	1,2
	JSR	GETW
	STA	1,ARG1
	ADDZ	1,2
	JSR	GETW
	STA	1,ARG2
	ADDZ	1,2
	JSR	GETW
	STA	1,ARG3
	ADDZ	1,2
	JSR	GETW
	STA	1,ARG4
	ADDZ	1,2
	JSR	GETW
	STA	1,CSUM
	ADDZ	1,2,SZR
	JMP	ESUM
	JSR	TTYCM
	LDA	2,?CTB
	LDA	0,CMD0
LOOP:
	LDA	0,CMD0
	LDA	1,+0,2
	SUB #	1,0,SNR
	JMP	FOUND
	LDA	2,+1,2
	MOV #	2,2,SZR
	JMP	LOOP
	JSR 	TTYS
	?NOTF*2
	JMP	MAIN

FOUND:
	MOV	2,1
	INC	1,1
	INC	1,1
	INCZL	1,1
	JSR 	TTYS1
	JSR	TTYSP
	JMP @ 	+2,2

?CTB:	C00

?NOTF:	.TXT	" CMD NOT FOUND"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
?ESUM:	.TXT	" CMD SUM ERROR "
?ESUA:	0
ESUM:
	STA	2,?ESUA
	JSR	TTYCM
	JSR 	TTYS
	?ESUM*2
	LDA	0,?ESUA
	JSR	TTYW
	JMP	MAIN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Dump Command buffer to TTY
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

?TTYC:	0	
TTYCM:
	STA	3,?TTYC
	JSR	TTYC
	'['
	LDA	0,CMD0
	JSR	TTYW
	JSR	TTYSP
	LDA	0,ARG1
	JSR	TTYW
	JSR	TTYSP
	LDA	0,ARG2
	JSR	TTYW
	JSR	TTYSP
	LDA	0,ARG3
	JSR	TTYW
	JSR	TTYSP
	LDA	0,ARG4
	JSR	TTYW
	JSR	TTYSP
	LDA	0,CSUM
	JSR	TTYW
	JSR	TTYC2
	'] '
	JMP	@?TTYC

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Just returns status zero as if checksum error
;; This is used for initial synhronization.

C00:	
	0.
	C01
	?C00
	.TXT	"SYNC"
?C00:
	SUBO	0,0
	JSR	PUTW
	JMP	MAIN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Returns SUM(ARG1::ARG2)

C01:	
	1.
	C02
	?C01
	.TXT	"SUM"
?C01:
	; Traffic:  1 = sum
	SUBZL	0,0
	JSR	PUTW
	SUBO	0,0
	LDA	3,ARG1
?C01B:
	LDA	1,+0,3
	ADDZ	1,0
	INC	3,3
	DSZ	ARG2
	JMP	?C01B

	JSR	TTYW
	JSR	PUTW
	JMP	MAIN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Uploads (ARG1:ARG2) returns sum

C02:	
	2.
	C03
	?C02
	.TXT	"UPLOAD"
?C02:
	; Traffic: negative word count
	LDA	0,ARG2
	NEG	0,0
	JSR	PUTW
	LDA	0,ARG1
	STA	0,ARG3
	LDA	0,ARG2
	STA	0,ARG4
?C02A:
	JSR	GETW
	STA @	1,ARG3
	ISZ	ARG3
	DSZ	ARG4
	JMP	?C02A
	JMP	?C01

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Downloads (ARG1:ARG2) returns sum

C03:	
	3.
	C04
	?C03
	.TXT	"DOWNLOAD"
?C03:
	; Traffic: postive word count + sum
	LDA	0,ARG2
	LDA	1,ARG1
	SUBZ	1,0
	INC	0,0
	JSR	PUTW
	SUBO	1,1
?C03A:
	LDA @	0,ARG1
	ADDZ	0,1
	JSR	PUTW
	ISZ	ARG1
	LDA	2,ARG1
	LDA	3,ARG2
	SUB #	2,3,SZR
	JMP	?C03A
	MOV	1,0
	JSR	TTYW
	JSR	PUTW
	JMP	MAIN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Fills (ARG1:ARG2) with ARG3, returns sum

C04:	
	4.
	C05
	?C04
	.TXT	"FILL"
?C04:
	; Traffic:  1 = sum
	SUBZL	0,0
	JSR	PUTW
	SUBO	0,0
?C04A:
	LDA 	1,ARG3
	ADDZ	1,0
	STA @	1,ARG1
	ISZ	ARG1
	LDA	2,ARG1
	LDA	3,ARG2
	SUB #	2,3,SZR
	JMP	?C04A
	JSR	TTYW
	JSR	PUTW
	JMP	MAIN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Compare (ARG1:ARG2) length ARG3 return zero if equal

C05:
	5.
	C06
	?C05
	.TXT	"COMPA"
?C05:
	; Traffic: 1 = result
	SUBZL	0,0
	JSR	PUTW
	LDA	2,ARG1
	LDA	3,ARG2
?C05A:
	LDA	0,+0,2
	LDA	1,+0,3
	SUBZ	1,0,SZR
	JMP	?C05B
	INC	2,2
	INC	3,3
	DSZ	ARG3
	JMP	?C05A
	SUBO	0,0
?C05B:
	JSR	TTYW
	JSR	PUTW
	JMP	MAIN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CHEW 
;; Returns checksum and last word repeat count for a
;; sequence of buffers (ie: sectors read from DKP)
;; ARG1 = Buffer address
;; ARG2 = sector length
;; ARG3 = sector count

C06:
	06.
	C07
	?C06
	.TXT	"CHEW"
?C06A:	0
?C06D:	0
?C06:
	; Traffic: two times ARG3
	LDA	0,ARG3
	MOVZL	0,0
	JSR	PUTW
?C06B:
	LDA	0,ARG2
	STA	0,?C06A
	SUBO	0,0
	SUBO	2,2
	STA	2,?C06D
?C06C:
	LDA @	1,ARG1
	ISZ	ARG1
	ADDZ	1,0

	SUBZ#	1,2,SZR
	JMP	?C06E
	ISZ	?C06D
	JMP	?C06F
?C06E:
	SUBO	2,2
	STA	2,?C06D
	MOV	1,2
?C06F:
	DSZ	?C06A
	JMP	?C06C

	JSR	PUTW
	LDA	0,?C06D
	JSR	PUTW

	DSZ	ARG3
	JMP	?C06B
	JMP	MAIN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MOVE ARG1 to ARG2 length ARG3 return sum

C07:
	7.
	C20
	?C07
	.TXT	"MOVE"
?C07:
	; Traffic:  1 = sum
	SUBZL	0,0
	JSR	PUTW
	SUBO	0,0
	LDA	3,ARG1
	LDA	2,ARG2
?C07B:
	LDA	1,+0,3
	STA	1,+0,2
	ADDZ	1,0
	INC	3,3
	INC	2,2
	DSZ	ARG3
	JMP	?C07B

	JSR	TTYW
	JSR	PUTW
	JMP	MAIN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DIABLO Disk section
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

DKPSP:
	LDA	1,+0,3
	DOAP	1,59.
	DIA	1,59.
	MOVS	1,2
	AND	1,2,SNR
	JMP	.-3
	JMP	+1,3

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; RECAL diablo

C20:
	20.
	C21
	?C20
	.TXT	"RECAL DKP"
?C20:
	; Traffic:  1 = DIA
	SUBZL	0,0
	JSR	PUTW

	.RDX	8
	JSR	DKPSP
		175000
	JSR	DKPSP
		175400
	JSR	DKPSP
		175000
	.RDX	10
	DIA	0,59.
	JSR	TTYW
	JSR	PUTW
	JMP	MAIN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; READ/WRITE diablo

C21:
	21.
	C22
	?C21
	.TXT	"DKP READ/WRITE"
?C21:
	; Traffic: DIA, DIB, DIC
	LDA	0,?3
	JSR	PUTW
	
	LDA	0, ARG2
	DOB	0, 59.
	LDA	0, ARG3
	DOC	0, 59.
	LDA	0, ARG1
	DOAS	0, 59.
	SKPDN	59.
	JMP	.-1

	DIA	0,59.
	JSR	TTYW
	JSR	PUTW

	JSR	TTYSP
	DIB	0,59.
	JSR	TTYW
	JSR	PUTW

	JSR	TTYSP
	DIC	0,59.
	JSR	TTYW
	JSR	PUTW
	JMP	MAIN
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SEEK diablo

C22:
	22.
	C08
	?C22
	.TXT	"SEEK DKP"
	.RDX	8
?C22A:		175000
	.RDX	10
?C22:
	; Traffic:  1 = DIA
	SUBZL	0,0
	JSR	PUTW

	LDA	0,ARG1
	LDA	1,?C22A
	ADDZ	0,1
	DOAP	1,59.
	DIA	1,59.
	MOVS	1,2
	AND	1,2,SNR
	JMP	.-3
	DIA	0,59.
	JSR	TTYW
	JSR	PUTW
	JMP	MAIN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; READ MCR card

C08:
	8.
	C09
	?C08
	.TXT	"START MCR"
?C08:
	; Traffic:  1 = status
	SUBZL	0,0
	JSR	PUTW

	LDA	0,ARG1
	DOB	0,14.
	LDA	0,ARG2
	DOAS	0,14.
	JSR	TTYW
	JSR	PUTW
	JMP	MAIN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Is MCR busy ?

C09:
	9.
	C10
	?C09
	.TXT	"MCR BUSY?"
?C09:
	; Traffic:  1 = status
	SUBZL	0,0
	JSR	PUTW

	SUBO	0,0
	SKPBN	14.
	INC	0,0
	JSR	TTYW
	JSR	PUTW
	JMP	MAIN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Issue IORST

C10:
	10.
	C999
	?C10
	.TXT	"IORST"
?C10:
	; Traffic:  1 = ack
	SUBZL	0,0
	JSR	PUTW

	IORST
	IORST
	SUBO	0,0
	JSR	TTYW
	JSR	PUTW
	JMP	MAIN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Return end address

C999:
	999.
	0
	?C999
	.TXT	"FREEMEM"
?C999:
	; Traffic:  1 = adress
	SUBZL	0,0
	JSR	PUTW

	LDA	0,.+4
	JSR	TTYW
	JSR	PUTW
	JMP	MAIN
	END

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

END:

.END
